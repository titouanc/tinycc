// A minimalist Brainfuck VM written in Tiny

#define _TINY

#ifdef _TINY
#include "tiny.lib"
#define ARRAY(type, size, name) type[size] name
#else
#define ARRAY(type, size, name) type name[size]
#define for(init, cond, incr, body) for (init; cond; incr) body
#define lengthOf(x) 1024
#define tiny main
#define print putchar
#define read getchar
#endif

#define  MEMSIZE 1024
#define PROGSIZE 1024

// Hello world: ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.

int init(ARRAY(char,MEMSIZE,mem)){
    int i;
    for(i=0, i<lengthOf(mem), i++, {
        mem[i] = '\x00';
    })
}

int search_matching(ARRAY(char,PROGSIZE,prog), int pc, char incr, char decr, int step){
    int counter;
    counter = 1;
    while (counter > 0){
        pc = pc + step;
        if (prog[pc] == incr){
            counter++;
        }
        if (prog[pc] == decr) {
            counter--;
        }
    }
    return pc;
}

int load_program(ARRAY(char,PROGSIZE,prog)){
    int i;
    char c;

    i = 0;
    c = read();

    while (10 != c){
        prog[i] = c;
        i++;
        c = read();
    }

    return 0;
}

int tiny(){
    int ptr;
    int pc;
    ARRAY(char,MEMSIZE,mem);
    ARRAY(char,PROGSIZE,prog);
    char instr;
    
    pc = 0;
    ptr = 0;
    load_program(prog);
    init(mem);
    instr = prog[pc];

    while (instr != '\x00'){
        if (instr == '>'){
            ptr = ptr + 1;
        } else if (instr == '<'){
            ptr = ptr - 1;
        } else if (instr == '+'){
            mem[ptr]++;
        } else if (instr == '-'){
            mem[ptr]--;
        } else if (instr == '.'){
            print(mem[ptr]);
        } else if (instr == ','){
            mem[ptr] = read();
        } else if (instr == '[' && mem[ptr] == 0){
            pc = search_matching(prog, pc+1, '[', ']', 1);
        } else if (instr == ']' && mem[ptr] != 0){
            pc = search_matching(prog, pc-1, ']', '[', 0-1);
        } else {
            print('!');
        }
        pc++;
        instr = prog[pc];
    }

    return 0;
}
