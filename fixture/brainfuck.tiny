#define for(init, cond, incr, body) init; while (cond) {if (1) body; incr;}
#define  MEMSIZE 1024
#define PROGSIZE 1024

int init(char[MEMSIZE] mem){
    int i;
    for(i=0, i<lengthOf(program), i=i+1, mem[i] = '\x00')
}

int search_matching(char[PROGSIZE] prog, int pc, char incr, char decr, int step){
    int counter;
    counter = 1;
    while (counter > 0){
        pc = pc + step;
        if (prog[pc] == incr){
            counter = counter + 1;
        }
        if (prog[pc] == decr) {
            counter = counter - 1;
        }
    }
    return pc;
}

int load_program(char[PROGSIZE] prog){
    int i;
    char c;

    i = 0;
    c = read();

    while (10 != c){
        prog[i] = c;
        i = i + 1;
        c = read();
    }

    return 0;
}

int tiny(){
    int ptr;
    int pc;
    char[MEMSIZE]   mem;
    char[PROGSIZE] prog;
    char instr;
    
    pc = 0;
    ptr = 0;
    load_program(prog);
    instr = prog[pc];

    while (instr != '\x00'){
        if (instr == '>'){
            ptr = ptr + 1;
        } else if (instr == '<'){
            ptr = ptr - 1;
        } else if (instr == '+'){
            mem[ptr] = mem[ptr] + '\x01';
        } else if (instr == '-'){
            mem[ptr] = mem[ptr] - '\x01';
        } else if (instr == '.'){
            print(mem[ptr]);
        } else if (instr == ','){
            mem[ptr] = read();
        } else if (instr == '['){
            pc = search_matching(prog, pc+1, '[', ']', 1);
        } else if (instr == ']'){
            pc = search_matching(prog, pc-1, ']', '[', 0-1);
        } else {}
        pc = pc + 1;
        instr = prog[pc];
    }
}
