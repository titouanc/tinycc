use std::str::FromStr;
use ::ast;

grammar;


// A name
Identifier: String = {<s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string()};

// A literal number
Number: i32 = {<n:r"[0-9]+"> => i32::from_str(n).unwrap()};

// A litteral char
Char: char = {
    <c:r"'.'"> => c.chars().nth(1).unwrap(),
    <x:r"'\\x[0-9a-fA-F][0-9a-fA-F]'"> => {
        u8::from_str_radix(&x[3..5], 16).unwrap() as char
    },
    "'\n'" => '\n',
    "'\r'" => '\r',
    "'\t'" => '\t'
};

// A (dimensional) type name
PrimType: ast::Type = {
    "int" => ast::Type::Int,
    "char" => ast::Type::Char,
};

Type: ast::Type = {
    PrimType,
    <t:PrimType> <shape:TypeShape> =>
        ast::Type::from_shape(t, shape),
};

TypeShape = <TypeShapeDim+>;
TypeShapeDim: usize = {"[" <size:Number> "]" => size as usize};

// Macro for a Comma Separated List
Csl<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};


// Top-level: A program is a sequence of declarations
pub Program = <Declaration+>;
pub Declaration = {FunDecl, <v:VarDecl> ";" => ast::Declaration::Var(v.0, v.1)};


// Variable declaration
VarDecl: (String, ast::Type) = {
    <typ:Type> <name:Identifier> => (name, typ),
};

// Function declaration
FunDecl: ast::Declaration = {
    <typ:Type> <name:Identifier> "(" <args:FormalParams> ")" <body:Block> =>
        ast::Declaration::Func(name, typ, args, body),
};
FormalParams = Csl<VarDecl>;

Block: Vec<ast::Statement> = RestrictedBlock<"Y">;

// Sequence of statements
RestrictedBlock<I>: Vec<ast::Statement> = {
    <s:RestrictedStatement<"">> => vec![s],
    "{" <Statement*> "}" => <>,
};


// Statement
pub Statement = {RestrictedStatement<"Y">};

RestrictedStatement<I>: ast::Statement = {
    <v:VarDecl> ";" => ast::Statement::LocalDecl(v.0, v.1),
    <e:Expr> ";" => ast::Statement::RValue(e),
    <l:LValue> "=" <r:Expr> ";" =>  ast::Statement::Assign(l, r),
    <l:LValue> "+=" <r:Expr> ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Add,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(r))
    ),
    <l:LValue> "-=" <r:Expr> ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Sub,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(r))
    ),
    <l:LValue> "*=" <r:Expr> ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Mul,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(r))
    ),
    <l:LValue> "/=" <r:Expr> ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Div,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(r))
    ),
    <l:LValue> "%=" <r:Expr> ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Mod,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(r))
    ),
    <l:LValue> "++" ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Add,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(ast::Expression::Lit(1)))
    ),
    <l:LValue> "--" ";" => ast::Statement::Assign(l.clone(),
        ast::Expression::InfixOp(ast::Operator::Sub,
                                 Box::new(ast::Expression::LValue(Box::new(l.clone()))),
                                 Box::new(ast::Expression::Lit(1)))
    ),
    "return" <e:Expr> ";" => ast::Statement::Return(e),
    "while" "(" <cond:Expr> ")" <body:Block> =>
        ast::Statement::Loop(cond, body),
    "if" "(" <cond:Expr> ")" <cons:RestrictedBlock<"Y">> if I != "" =>
        ast::Statement::Condition(cond, cons, vec![]),
    "if" "(" <cond:Expr> ")" <cons:RestrictedBlock<"">> "else" <alt:RestrictedBlock<I>> =>
        ast::Statement::Condition(cond, cons, alt),
};

// Expressions
pub Expr: ast::Expression = Logical;

// Logical expression (and, or)
Logical: ast::Expression = {
    <l:Logical> <op:LogicOp> <r:Cmp> =>
        ast::Expression::InfixOp(op, Box::new(l), Box::new(r)),
    Cmp,
};

// Comparative expr
Cmp: ast::Expression = {
    <l:Term> <op:CmpOp> <r:Term> =>
        ast::Expression::InfixOp(op, Box::new(l), Box::new(r)),
    Term,
};

// Additive expr
Term: ast::Expression = {
    <l:Term> <op:TermOp> <r:Factor> =>
        ast::Expression::InfixOp(op, Box::new(l), Box::new(r)),
    Factor,
};

// Multiplicative expr
Factor: ast::Expression = {
    <l:Factor> <op:FactorOp> <r:Ternary> =>
        ast::Expression::InfixOp(op, Box::new(l), Box::new(r)),
    Ternary,
};

// a ? b : c
Ternary: ast::Expression = {
    <cond:Bitwise> "?" <cons:Bitwise> ":" <alt:Bitwise> =>
        ast::Expression::Ternary(Box::new(cond), Box::new(cons), Box::new(alt)),
    Bitwise,
};

Bitwise: ast::Expression = {
    <l:Atom> <op:BitOp> <r:Atom> =>
        ast::Expression::InfixOp(op, Box::new(l), Box::new(r)),
    Atom,
};

// literal, variable, parentheses
Atom: ast::Expression = {
    <n:Number> => ast::Expression::Lit(n),
    <c:Char> => ast::Expression::CharLit(c),
    <LValue> => ast::Expression::LValue(Box::new(<>)),
    <name:Identifier> "(" <args:Csl<Expr>> ")" =>
        ast::Expression::Funcall(name, args),
    <Primitive> => <>,
    "(" <Expr> ")" => <>,
};

Primitive: ast::Expression = {
    "lengthOf" "(" <val:LValue> ")" => ast::Expression::ArrayLen(Box::new(val)),
    "lengthOf" <val:LValue> => ast::Expression::ArrayLen(Box::new(val)),
};

// Something we can use as assignable value
LValue: ast::LValue = {
    <l:LValue> "[" <i:Expr> "]" => ast::LValue::ArrayItem(Box::new(l), i),
    <Identifier> => ast::LValue::Identifier(<>),
};

LogicOp: ast::Operator = {
    "&&" => ast::Operator::And,
    "and" => ast::Operator::And,
    "||" => ast::Operator::Or,
    "or" => ast::Operator::Or,
};

BitOp: ast::Operator = {
    "^" => ast::Operator::BitXor,
    "&" => ast::Operator::BitAnd,
    "|" => ast::Operator::BitOr,
};

// Comparison operators
CmpOp: ast::Operator = {
    "==" => ast::Operator::Eql,
    "!=" => ast::Operator::NotEql,
    "<"  => ast::Operator::Lt,
    "<=" => ast::Operator::Lte,
    ">"  => ast::Operator::Gt,
    ">=" => ast::Operator::Gte,
};

// Additive operators
TermOp: ast::Operator = {
    "+" => ast::Operator::Add,
    "-" => ast::Operator::Sub,
};

// Multiplcative operators
FactorOp: ast::Operator = {
    "*" => ast::Operator::Mul,
    "/" => ast::Operator::Div,
    "%" => ast::Operator::Mod,
};
